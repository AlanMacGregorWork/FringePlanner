name: iOS starter workflow

on:
  push:
    branches: [ "main", "ci" ]
  pull_request:
    branches: [ "main", "ci" ]
    
env:
  SCHEME: FringePlanner
  PROJECT: FringePlanner.xcodeproj
  IOS_VERSION: "18.1"

jobs:
  build:
    name: Build and Test using any available iPhone simulator
    runs-on: macos-14
    timeout-minutes: 10     # Ensures that if the tests get stuck there will me a timeout to reduce the cost of running this

    steps:
      - name: List available Xcode versions
        run: ls /Applications | grep Xcode
        
      - name: List available simulators
        run: xcrun xctrace list devices
        
      - name: Set simulator
        id: set-simulator
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device_info=`xcrun xctrace list devices 2>&1 | grep -oE "iPhone.*Simulator \($IOS_VERSION[^)]*\) \([A-Z0-9-]+\)" | head -1`
          if [ -z "$device_info" ]; then
            echo "No iOS $IOS_VERSION simulator found. Please make sure at least one iOS $IOS_VERSION simulator is available."
            exit 1
          fi
          
          # Extract the UUID from the device info (the second parenthesized group)
          uuid=`echo "$device_info" | grep -oE '\([A-Z0-9-]+\)$' | sed -e "s/[()]//g"`
          device_name=`echo "$device_info" | sed -e "s/ (${uuid})$//"`
          
          echo "Using simulator: $device_name (UUID: $uuid)"
          echo "simulator=$uuid" >> $GITHUB_OUTPUT
        
      - name: Show current version of Xcode
        run: xcodebuild -version
        
      - name: Set up Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          
      - name: Checkout
        uses: actions/checkout@v4

      - name: Current Location
        run: pwd;ls FringePlanner

      - name: Add fake keys
        run: echo -e "FRINGE_API_KEY = fake\nFRINGE_SECRET_SIGNING_KEY = fake" > FringePlanner/Helper/Keys.xcconfig

      - name: Display fake keys
        run: cat FringePlanner/Helper/Keys.xcconfig

      - name: Install xcpretty
        run: gem install xcpretty

      - name: Run Unit Tests
        env:
          platform: ${{ 'iOS Simulator' }}
        run: |
          set -o pipefail && xcodebuild -scheme "$SCHEME" \
            -project "$PROJECT" \
            -destination "platform=$platform,id=${{ steps.set-simulator.outputs.simulator }},OS=$IOS_VERSION" \
            -resultBundlePath TestResults.xcresult \
            -testPlan UnitTestPlan \
            test | xcpretty --report junit --output test_results.xml

      - name: Convert JUnit to CTRF
        uses: ctrf-io/junit-to-ctrf@v1
        if: always()
        with:
          input: test_results.xml
          output: ctrf_results.json

      - name: Publish Test Results
        uses: ctrf-io/github-test-reporter@v1
        if: always()
        with:
          report-path: 'ctrf_results.json'
          flaky-rate-report: true
          pull-request: true
          update-comment: true
          comment-tag: '${{ github.workflow }}-${{ github.job }}'
          github-report: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test_results.xml

      - name: Upload xcresult
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: TestResults.xcresult
          path: TestResults.xcresult